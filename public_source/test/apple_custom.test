# 2010 July 27
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# This file implements regression tests for SQLite library.  The
# focus of this script is database proxy locks.
#
# $Id$

set testdir [file dirname $argv0]
source $testdir/tester.tcl

set productName [exec sw_vers -productName]
set isIOS 0
set isMacOS 0
if { $productName == "Mac OS X" } {
  set isMacOS 1
}
if { $productName == "iPhone OS" } {
  set isIOS 1
}

do_test apple_custom-0.0 {
  lsort [ list $isIOS $isMacOS ]
} {0 1}


#
# apple_custom tests cover the apple customize behaviors and truncate 
# and replace file control SPI
#
# apple_custom-1.*    binary compatibility tests for substr (iOS only)
# apple_custom-2.*    SQLITE_FCNTL_TRUNCATE_DATABASE tests
# apple_custom-3.*    SQLITE_FCNTL_REPLACE_DATABASE tests
# apple_custom-4.*    SQLITE_FCNTL_TRUNCATE_DATABASE tests (wal mode)
# apple_custom-5.*    SQLITE_FCNTL_REPLACE_DATABASE tests (wal mode)
# apple_custom-6.*    write lock on src db prevents REPLACE
# apple_custom-7.*    test replace for switching journal modes wal/delete
# apple_custom-8.*    default synchronous settings for wal & delete mode
#

# iOS specific tests
if { $isIOS } {
  do_test apple_custom-1.1 {
    execsql {
      select substr("face", 0, 1), substr("face", 1, 1);
    } 
  } { f f }
}

# MacOS specific tests
if { $isMacOS } {
  do_test apple_custom-1.2 {
    execsql {
      select substr("face", 0, 1), substr("face", 1, 1);
    } 
  } {{} f}
}

# Cross platform tests
do_test apple_custom-2.1 {
  db close
  sqlite3 db test_control_truncate.db
  file_control_truncate_test db 0
} {}

do_test apple_custom-2.2 {
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  file_control_truncate_test db 0
  catchsql {SELECT * FROM test1}
} {1 {no such table: test1}}

do_test apple_custom-2.3.0 {
  db close
  sqlite3 db2 test_control_truncate.db
  execsql { CREATE TABLE test1(a,b,c) } db2
  sqlite3 db test_control_truncate.db
  execsql {
    BEGIN;
    INSERT INTO test1 VALUES(1,2,3);
  }
  catch { file_control_truncate_test db2 0 } msg
  set msg
} {5}

do_test apple_custom-2.3.1 {
  execsql {
    COMMIT;
  }
  db2 close
  execsql { SELECT * FROM test1 } db
} {1 2 3}

do_test apple_custom-2.3.2 {
  db close
  sqlite3 db2 test_control_truncate.db
  execsql { CREATE TABLE test2(a,b,c) } db2
  sqlite3 db test_control_truncate.db
  execsql {
    BEGIN;
    INSERT INTO test2 VALUES(1,2,3);
  }
  catch { file_control_truncate_test db2 128 } msg
  set msg
} {}

do_test apple_custom-2.3.3 {
  execsql {
    ROLLBACK;
  }
  db2 close
  execsql { SELECT * FROM sqlite_master } db
} {}
db close


# truncate a 'corrupt' database
do_test apple_custom-2.4.0 {
  sqlite3 db test_control_truncate.db
  execsql { 
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  db close
  set fd [open test_control_truncate.db r+]
  fconfigure $fd -translation binary
  seek $fd 63
  puts -nonewline $fd "kljahsddflkjahdflkjhasdflkjhasdflkjhasdflkjhasdflkjahdflkjhadsflkjhasdflkjhasdflkjhasdlfkjhassdflkjhasdflkjhasdflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdlfkjhasdflkjhasdflkjhadflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjh"
  close $fd

  sqlite3 db test_control_truncate.db
  catchsql {SELECT * FROM test1}
} {1 {database disk image is malformed}}

do_test apple_custom-2.4.1 {
  file_control_truncate_test db 0
  execsql {
    CREATE TABLE x(y);
    INSERT INTO x VALUES(99);
    SELECT * FROM x;
  }
} {99}

# truncate a 'notadb' database
do_test apple_custom-2.4.2 {
  db close

  set fd [open test_control_truncate.db r+]
  fconfigure $fd -translation binary
  seek $fd 0
  puts -nonewline $fd "Not a db"
  close $fd

  sqlite3 db test_control_truncate.db
  catchsql {SELECT * FROM test1}
} {1 {file is encrypted or is not a database}}

do_test apple_custom-2.4.3 {
  file_control_truncate_test db 0
  execsql {
    CREATE TABLE x(y);
    INSERT INTO x VALUES(98);
    SELECT * FROM x;
  }
} {98}

# test the truncate flag options
# SQLITE_TRUNCATE_JOURNALMODE_WAL           (1)
# SQLITE_TRUNCATE_AUTOVACUUM_FULL           (8)
# SQLITE_TRUNCATE_AUTOVACUUM_INCREMENTAL    (12)
# SQLITE_TRUNCATE_PAGESIZE_1024             (16)
# SQLITE_TRUNCATE_PAGESIZE_2048             (32)
# SQLITE_TRUNCATE_PAGESIZE_4096             (48)
# SQLITE_TRUNCATE_PAGESIZE_8192             (64)
# SQLITE_TRUNCATE_FORCE                     (128)


ifcapable wal {
  if { [wal_is_ok] } {
     
    do_test apple_custom-2.5.0 {
      file_control_truncate_test db 1
      db close
      sqlite3 db test_control_truncate.db
      execsql {
        pragma journal_mode;
      }
    } {wal}
    
  }
}
do_test apple_custom-2.5.1 {
  file_control_truncate_test db 8
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma auto_vacuum;
  }
} {1}
do_test apple_custom-2.5.2 {
  file_control_truncate_test db 12
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma auto_vacuum;
  }
} {2}
do_test apple_custom-2.5.3 {
  file_control_truncate_test db 16
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma page_size;
  }
} {1024}
do_test apple_custom-2.5.4 {
  file_control_truncate_test db 32
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma page_size;
  }
} {2048}
do_test apple_custom-2.5.5 {
  file_control_truncate_test db 48
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma page_size;
  }
} {4096}
do_test apple_custom-2.5.6 {
  file_control_truncate_test db 64
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma page_size;
  }
} {8192}

ifcapable wal {
  if { [wal_is_ok] } {

    do_test apple_custom-2.5.7 {
      file_control_truncate_test db 41
      db close
      sqlite3 db test_control_truncate.db
      execsql {
        pragma page_size;
      }
    } {2048}
    do_test apple_custom-2.5.8 {
      execsql {
        pragma auto_vacuum;
      }
    } {1}
    do_test apple_custom-2.5.9 {
      execsql {
        pragma journal_mode;
      }
    } {wal}
  
  }
}

do_test apple_custom-2.6.0 {
  file_control_truncate_test db 0
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma journal_mode;
  }
} {delete}
do_test apple_custom-2.6.1 {
  sqlite3 db2 test_control_truncate.db
  execsql {
    begin;
    create table x(y);
  } db2
  catch { file_control_truncate_test db 1 } msg
  db close
  db2 close
  sqlite3 db test_control_truncate.db
  execsql {
    pragma journal_mode;
  }
} {delete}

ifcapable wal {
  if { [wal_is_ok] } {

    do_test apple_custom-2.6.2 {
      sqlite3 db2 test_control_truncate.db
      execsql {
        create table test(a,b,c);
        begin;
        create table x(y);
      } db2
      file_control_truncate_test db 129
      execsql { rollback } db2
      db2 close
      db close
      sqlite3 db test_control_truncate.db
      execsql {
        select * from sqlite_master;
      }
    } {}
    do_test apple_custom-2.6.3 {
      db close
      sqlite3 db test_control_truncate.db
      execsql {
        pragma journal_mode;
      }
    } {wal}
    
  }
}

db close
file delete -force test_control_truncate.db
sqlite3 db test_control_replace_src.db
sqlite3 db2 test_control_replace_dst.db
file_control_truncate_test db 0
file_control_truncate_test db2 0
db close
db2 close
file delete -force test_control_replace_src.db
file delete -force test_control_replace_dst.db

do_test apple_custom-3.1 {
  sqlite3 db test_control_replace_src.db
  sqlite3 db2 test_control_replace_dst.db
  file_control_replace_test db2 db
} {}

do_test apple_custom-3.2 {
  execsql {
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  file_control_replace_test db2 db
  execsql {
    INSERT INTO test1 VALUES(4,5,6);
  }
  execsql {select * from test1} db2
} {1 2 3}

# read lock on dst blocks replace
do_test apple_custom-3.3.0 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    BEGIN;
    SELECT * from test1;
  } db3
  catch { file_control_replace_test db2 db} msg
  set msg
} {5}

# read lock on src is OK
do_test apple_custom-3.3.1 {
  execsql {
    COMMIT;
  } db3
  db3 close
  sqlite3 db3 test_control_replace_src.db
  execsql {
    BEGIN;
    SELECT * from test1;
  } db3
  file_control_replace_test db2 db
  execsql { SELECT * FROM test1 } db
} {1 2 3 4 5 6}

db3 close

# replace a 'corrupt' database
do_test apple_custom-3.4.0 {
  db2 close

  set fd [open test_control_replace_dst.db r+]
  fconfigure $fd -translation binary
  seek $fd 63
  puts -nonewline $fd "kljahsddflkjahdflkjhasdflkjhasdflkjhasdflkjhasdflkjahdflkjhadsflkjhasdflkjhasdflkjhasdlfkjhassdflkjhasdflkjhasdflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdlfkjhasdflkjhasdflkjhadflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjh"
  close $fd

  sqlite3 db2 test_control_replace_dst.db
  catchsql {SELECT * FROM test1} db2
} {1 {database disk image is malformed}}

do_test apple_custom-3.4.1 {
  sqlite3 db3 test_control_replace_corrupt.db
  file_control_replace_test db3 db2
} {}

do_test apple_custom-3.4.2 {
  db3 close
  sqlite3 db3 test_control_replace_corrupt.db
  catchsql {SELECT * FROM test1} db3
} {1 {database disk image is malformed}}

file_control_truncate_test db3 0
db3 close
file delete -force test_control_replace_corrupt.db

do_test apple_custom-3.4.3 {
  file_control_replace_test db2 db
} {}

do_test apple_custom-3.4.4 {
  execsql {select * from test1} db2
} {1 2 3 4 5 6}

# replace a 'notadb' database
do_test apple_custom-3.4.5 {
  db2 close

  set fd [open test_control_replace_dst.db r+]
  fconfigure $fd -translation binary
  seek $fd 0
  puts -nonewline $fd "Not a db"
  close $fd

  sqlite3 db2 test_control_replace_dst.db
  catchsql {SELECT * FROM test1} db2
} {1 {file is encrypted or is not a database}}

do_test apple_custom-3.4.6 {
  sqlite3 db3 test_control_replace_notadb.db
  file_control_replace_test db3 db2
} {}

do_test apple_custom-3.4.7 {
  db3 close
  sqlite3 db3 test_control_replace_notadb.db
  catchsql {SELECT * FROM test1} db3
} {1 {file is encrypted or is not a database}}

file_control_truncate_test db3 0
db3 close
file delete -force test_control_replace_notadb.db

do_test apple_custom-3.4.8 {
  file_control_replace_test db2 db
} {}

do_test apple_custom-3.4.9 {
  execsql {select * from test1} db2
} {1 2 3 4 5 6}

# add test to ensure a write lock on src blocks replace (needs to be out of 
# process)

file_control_truncate_test db 0
file_control_truncate_test db2 0
db close
db2 close
file delete -force test_control_replace_src.db
file delete -force test_control_replace_dst.db

# test the trunate and replace SPI in wal mode, if possible
if { ![wal_is_ok] } {
  finish_test 
  return 
}

# Cross platform tests
do_test apple_custom-4.1 {
  sqlite3 db test_control_truncate.db
  execsql {
    PRAGMA journal_mode=wal;
  }
  file_control_truncate_test db 0
} {}

do_test apple_custom-4.2 {
  db close
  sqlite3 db test_control_truncate.db
  execsql {
    PRAGMA journal_mode=wal;
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  file_control_truncate_test db 0
  catchsql {SELECT * FROM test1}
} {1 {no such table: test1}}

do_test apple_custom-4.3.0 {
  db close
  sqlite3 db2 test_control_truncate.db
  execsql { 
    PRAGMA journal_mode=wal;
    CREATE TABLE test1(a,b,c) 
  } db2
  sqlite3 db test_control_truncate.db
  execsql {
    PRAGMA journal_mode=wal;
    BEGIN;
    INSERT INTO test1 VALUES(1,2,3);
  }
  catch { file_control_truncate_test db2 0} msg
  set msg
} {5}

do_test apple_custom-4.3.1 {
  execsql {
    COMMIT;
  }
  db2 close
  execsql { SELECT * FROM test1 } db
} {1 2 3}

# truncate a 'corrupt' database
do_test apple_custom-4.4.0 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db 0
  }
  db close
  #set dbpath [exec pwd]
  #puts "Check the path $dbpath"
  #exec sleep 20
  set fd [open test_control_truncate.db r+]
  fconfigure $fd -translation binary
  seek $fd 63
  puts -nonewline $fd "kljahsddflkjahdflkjhasdflkjhasdflkjhasdflkjhasdflkjahdflkjhadsflkjhasdflkjhasdflkjhasdlfkjhassdflkjhasdflkjhasdflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdlfkjhasdflkjhasdflkjhadflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjh"
  close $fd

  sqlite3 db test_control_truncate.db
  catchsql {SELECT * FROM test1}
} {1 {database disk image is malformed}}

do_test apple_custom-4.4.1 {
  file_control_truncate_test db 0
  execsql {
    PRAGMA journal_mode=wal;
    CREATE TABLE x(y);
    INSERT INTO x VALUES(99);
    SELECT * FROM x;
  }
} {wal 99}

# truncate a 'notadb' database
do_test apple_custom-4.4.2 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db 0
  }
  db close

  set fd [open test_control_truncate.db r+]
  fconfigure $fd -translation binary
  seek $fd 0
  puts -nonewline $fd "Not a db"
  close $fd

  sqlite3 db test_control_truncate.db
  catchsql {SELECT * FROM test1}
} {1 {file is encrypted or is not a database}}

do_test apple_custom-4.4.3 {
  file_control_truncate_test db 0
  execsql {
  PRAGMA journal_mode=wal;
  CREATE TABLE x(y);
  INSERT INTO x VALUES(98);
  SELECT * FROM x;
  }
} {wal 98}


db close
file delete -force test_control_truncate.db

do_test apple_custom-5.1 {
  sqlite3 db test_control_replace_src.db
  execsql {
    PRAGMA journal_mode=wal;
  }
  sqlite3 db2 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=wal;
  } db2
  file_control_replace_test db2 db
} {}

do_test apple_custom-5.2 {
  execsql {
    PRAGMA journal_mode=wal;
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  file_control_replace_test db2 db
  execsql {
    INSERT INTO test1 VALUES(4,5,6);
  }
  execsql {select * from test1} db2
} {1 2 3}

# read lock on dst blocks replace
do_test apple_custom-5.3.0 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=wal;
    BEGIN;
    SELECT * from test1;
  } db3
  catch { file_control_replace_test db2 db} msg
  set msg
} {5}

# read lock on src is OK
do_test apple_custom-5.3.1 {
  execsql {
    COMMIT;
  } db3
  db3 close
  sqlite3 db3 test_control_replace_src.db
  execsql {
    PRAGMA journal_mode=wal;
    BEGIN;
    SELECT * from test1;
  } db3
  file_control_replace_test db2 db
  execsql { 
    pragma journal_mode;
    SELECT * FROM test1 
  } db
} {wal 1 2 3 4 5 6}

db3 close

# replace a 'corrupt' database
do_test apple_custom-5.4.0 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db2 0
  }
  db2 close

  set fd [open test_control_replace_dst.db r+]
  fconfigure $fd -translation binary
  seek $fd 63
  puts -nonewline $fd "kljahsddflkjahdflkjhasdflkjhasdflkjhasdflkjhasdflkjahdflkjhadsflkjhasdflkjhasdflkjhasdlfkjhassdflkjhasdflkjhasdflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdlfkjhasdflkjhasdflkjhadflkjhadflkjhasdflkjhasdflkjhasdflkjhasdflkjhasdflkjh"
  close $fd

  sqlite3 db2 test_control_replace_dst.db
  catchsql {SELECT * FROM test1} db2
} {1 {database disk image is malformed}}

do_test apple_custom-5.4.1 {
  sqlite3 db3 test_control_replace_corrupt.db
  file_control_replace_test db3 db2
} {}

do_test apple_custom-5.4.2 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db3 0
  }
  db3 close
  sqlite3 db3 test_control_replace_corrupt.db
  catchsql {SELECT * FROM test1} db3
} {1 {database disk image is malformed}}

file_control_truncate_test db3 0
db3 close
file delete -force test_control_replace_corrupt.db

db close
db2 close
sqlite3 db2 test_control_replace_dst.db
sqlite3 db test_control_replace_src.db

do_test apple_custom-5.4.3 {
  file_control_replace_test db2 db
} {}

do_test apple_custom-5.4.4 {
  db2 close
  sqlite3 db2 test_control_replace_dst.db
  execsql {
    pragma journal_mode;
    select * from test1
  } db2
} {wal 1 2 3 4 5 6}

# replace a 'notadb' database
do_test apple_custom-5.4.5 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db2 0
  }
  db2 close

  set fd [open test_control_replace_dst.db r+]
  fconfigure $fd -translation binary
  seek $fd 0
  puts -nonewline $fd "Not a db"
  close $fd

  sqlite3 db2 test_control_replace_dst.db
  catchsql {SELECT * FROM test1} db2
} {1 {file is encrypted or is not a database}}

do_test apple_custom-5.4.6 {
  sqlite3 db3 test_control_replace_notadb.db
  file_control_replace_test db3 db2
} {}

do_test apple_custom-5.4.7 {
  ifcapable enable_persist_wal {
    file_control_persist_wal db3 0
  }
  db3 close
  sqlite3 db3 test_control_replace_notadb.db
  catchsql {SELECT * FROM test1} db3
} {1 {file is encrypted or is not a database}}

file_control_truncate_test db3 0
db3 close
file delete -force test_control_replace_notadb.db

do_test apple_custom-5.4.6 {
  file_control_replace_test db2 db
} {}

do_test apple_custom-5.4.7 {
  execsql {
    pragma journal_mode;
    select * from test1
  } db2
} {wal 1 2 3 4 5 6}

# add test to ensure a write lock on src blocks replace (needs to be out of 
# process)

file_control_truncate_test db 0
file_control_truncate_test db2 0
db close
db2 close
file delete -force test_control_replace_src.db
file delete -force test_control_replace_dst.db

do_test apple_custom-6.1 {
  sqlite3 db test_control_replace_src.db
  execsql {
    PRAGMA journal_mode=delete;
  }
  sqlite3 db2 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=wal;
  } db2
  file_control_replace_test db2 db
} {}

do_test apple_custom-6.1.1 {
  execsql {
    PRAGMA journal_mode;
  } db
} {delete}

do_test apple_custom-6.1.2 {
  execsql {
    select * from sqlite_master;
    PRAGMA journal_mode;
  } db2
} {delete}

do_test apple_custom-6.1.3 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    select * from sqlite_master;
    PRAGMA journal_mode;
  } db3
} {delete}
db3 close

do_test apple_custom-6.2 {
  execsql {
    PRAGMA journal_mode=wal;
  } db2
  execsql {
    PRAGMA journal_mode=delete;
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
  }
  file_control_replace_test db2 db
  execsql {
    INSERT INTO test1 VALUES(4,5,6);
  }
  execsql {select * from test1} db2
} {1 2 3}

# read lock on dst blocks replace
do_test apple_custom-6.3.0 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=wal;
    BEGIN;
    SELECT * from test1;
  } db3
  catch { file_control_replace_test db2 db} msg
  set msg
} {5}

# read lock on src is OK
do_test apple_custom-6.3.1 {
  execsql {
    COMMIT;
  } db3
  db3 close
  sqlite3 db3 test_control_replace_src.db
  execsql {
    PRAGMA journal_mode=wal;
    BEGIN;
    SELECT * from test1;
  } db3
  file_control_replace_test db2 db
  execsql { SELECT * FROM test1 } db
} {1 2 3 4 5 6}

db3 close
file_control_truncate_test db 0
file_control_truncate_test db2 0
db close
db2 close
file delete -force test_control_replace_src.db
file delete -force test_control_replace_dst.db


do_test apple_custom-7.1 {
  sqlite3 db test_control_replace_src.db
  execsql {
    PRAGMA journal_mode=wal;
  }
  sqlite3 db2 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=delete;
  } db2
  file_control_replace_test db2 db
} {}

do_test apple_custom-7.1.1 {
  execsql {
    PRAGMA journal_mode;
  } db
} {wal}

do_test apple_custom-7.1.2 {
  execsql {
    select * from sqlite_master;
    PRAGMA journal_mode;
  } db2
} {wal}
db2 close

do_test apple_custom-7.1.3 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    select * from sqlite_master;
    PRAGMA journal_mode;
  } db3
} {wal}
db3 close

# copy a wal-mode db over a delete-mode db
do_test apple_custom-7.2.0 {
  sqlite3 db2 test_control_replace_dst.db
  execsql {
    PRAGMA journal_mode=delete;
    CREATE TABLE test2(a,b,c);
    INSERT INTO test2 VALUES(-200, -201, -202);
    SELECT * FROM test2
  } db2
} {delete -200 -201 -202}
do_test apple_custom-7.2.1 {
  execsql {
    PRAGMA journal_mode=wal;
    CREATE TABLE test1(a,b,c);
    INSERT INTO test1 VALUES(1,2,3);
    SELECT * from test1;
  }
} {wal 1 2 3}
do_test apple_custom-7.2.2 {
  file_control_replace_test db2 db
} {} 
do_test apple_custom-7.2.3 {
  execsql {
    INSERT INTO test1 VALUES(4,5,6);
    SELECT * FROM test1;
  }
} {1 2 3 4 5 6}
do_test apple_custom-7.2.4 {
  db2 close
  sqlite3 db2 test_control_replace_dst.db  
  execsql {
    pragma journal_mode;
    select * from test1;
  } db2
} {wal 1 2 3}

# read lock on dst blocks replace
do_test apple_custom-7.3.0 {
  sqlite3 db3 test_control_replace_dst.db
  execsql {
    BEGIN;
    SELECT * from test1;
  } db3
  catch { file_control_replace_test db2 db} msg
  set msg
} {5}

# read lock on src is OK
do_test apple_custom-7.3.1 {
  execsql {
    COMMIT;
  } db3
  db3 close
  sqlite3 db3 test_control_replace_src.db
  execsql {
    BEGIN;
    SELECT * from test1;
  } db3
  file_control_replace_test db2 db
  execsql { SELECT * FROM test1 } db
} {1 2 3 4 5 6}

db3 close
file_control_truncate_test db 0
file_control_truncate_test db2 0
db close
db2 close
file delete -force test_control_replace_src.db
file delete -force test_control_replace_dst.db

ifcapable wal {
  if { [wal_is_ok] && $sqlite_options(default_wal_safetylevel) } {
    
    sqlite3 db test.db
    do_test apple_custom-8.1 {
      execsql {
        pragma synchronous;
      }
    } {2}
    
    do_test apple_custom-8.2 {
      execsql {
        pragma journal_mode=wal;
        pragma synchronous;
      }
    } {wal 1}

    do_test apple_custom-8.3 {
      execsql {
        pragma journal_mode=delete;
        pragma synchronous;
      }
    } {delete 2}

    do_test apple_custom-8.4 {
      execsql {
        pragma synchronous=2;
        create table x(y);
        pragma journal_mode=wal;
        pragma synchronous;  
      }
    } {wal 2}

    sqlite3 db2 test.db
    do_test apple_custom-8.5 {
      execsql {
        pragma synchronous=2;
        insert into x values (1);
        pragma synchronous;  
      } db2
    } {2}

  }
}

finish_test
